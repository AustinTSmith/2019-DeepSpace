import java.text.SimpleDateFormat;
import java.io.ByteArrayOutputStream;

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath 'gov.nist.math:jama:1.0.3'
    }
}

plugins {
    id "java"
    id "jaci.openrio.gradle.GradleRIO" version "2018.03.06"
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'org.junit.platform.gradle.plugin'

def TEAM = 254
def ROBOT_CLASS = "com.spartronics4915.frc2019.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

wpi {
    // We use a newer version than default one for 2018
    ctreVersion = "5.3.1.0"
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile("gov.nist.math:jama:1.0.3")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.3")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.3")
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
    manifest {
        String user = System.getProperty("user.name");
        SimpleDateFormat fmt = new SimpleDateFormat("MMMMM dd, hh:mm a");
        ByteArrayOutputStream gitinfo = new ByteArrayOutputStream();
        exec {
            ignoreExitValue true
            commandLine 'git', 'describe', "--tags", "--dirty"
            standardOutput = gitinfo
        }
        attributes (
            "Built-By": user,
            "Built-At": fmt.format(new Date()),
            "Code-Version": gitinfo.toString().trim()
        )
    }
}

junitPlatform {
    filters {
        engines {
        }
        tags {
            exclude 'slow'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}
